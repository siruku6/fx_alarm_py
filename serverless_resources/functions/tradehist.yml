description: testing serverless framework
# handler: handler.hello
handler: main.api_handler
name: ${self:custom.prefix}--tradehist
layers: arn:aws:lambda:us-east-2:${env:AWS_ACCOUNT_ID}:layer:trader_modules:4
events:
  - http:
      path: tradehist
      method: get
      cors:
        origin: '*'
        headers:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          # - X-Amz-User-Agent
        # allowCredentials: true
        methods:
          - GET
          - OPTIONS

      # integration: lambda # Lambda統合されるが、Lambdaプロキシ統合はオフにする場合の記述
      reqValidatorName: onlyStringParameters
      request:
        parameters:
          querystrings:
            pareName: true
            from: true
            to: true
      #     headers:
      #       foo: false
      #     paths:
      #       bar: false
      #   # カスタムテンプレートの作成
      #   template:
      #     application/json: >
      #       {
      #         "pareName" : "$input.params('pareName')",
      #         "from": "$input.params('from')"
      #       }
      #   template:
      #     application/octet-stream:
      #       '{"headers":{
      #         #foreach($key in $input.params().header.keySet())
      #         "$key": "$input.params().header.get($key)"#if($foreach.hasNext),#end
      #         #end
      #         },
      #         "body": "$util.base64Encode($input.json(''$''))"
      #         }'

      # カスタムレスポンスの作成
      # response:
      #   headers:
      #     Content-Type: "'application/octet-stream'"
      #   template: $input.path('$')
      #   statusCodes:
      #     200:
      #       pattern: ''
      #     # カスタムステータスコード
      #     401:
      #       pattern: '.*"statusCode": 401,.*'
      #       template: $input.path("$.errorMessage")
      #       headers:
      #         Content-Type: "'application/octet-stream'"
  # - schedule: rate(10 minutes)
  # - sns: greeter-topic
  # - cloudwatchEvent:
  #     event:
  #       source:
  #         - "aws.ec2"
  #       detail-type:
  #         - "EC2 Instance State-change Notification"
  #       detail:
  #         state:
  #           - pending
  # - cognitoUserPool:
  #     pool: MyUserPool
  #     trigger: PreSignUp

# INFO: 自動で log group が作成されてしまうのを防ぐ設定
#   その場合は代わりに resources: で log group を作成する
# disableLogs: true

# Define environment variables
environment:
  EXECTION_ENVIRONMENT: ${env:EXECTION_ENVIRONMENT}
  INSTRUMENT: ${env:INSTRUMENT}
  GRANULARITY: ${env:GRANULARITY}
  STOPLOSS_BUFFER: ${env:STOPLOSS_BUFFER}
  UNITS: ${env:UNITS}
  OANDA_ACCESS_TOKEN: ${env:OANDA_ACCESS_TOKEN}
  OANDA_ACCOUNT_ID: ${env:OANDA_ACCOUNT_ID}
  OANDA_ENVIRONMENT: practice
  STAGE: ${self:provider.stage}
  TZ: Asia/Tokyo
